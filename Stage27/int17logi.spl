// Set the mode flag in the process table to indicate login
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 27;
// Save the user stack pointer in the process table
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
alias userSP R0;
userSP = SP;

// Switch to the kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

alias username R1;
alias password R2;
alias returnAddress R3;

// Retrieve the username and password from the user stack
username = [[PTBR + 2 * (userSP - 4) / 512] * 512 + (userSP - 4) % 512];
password = [[PTBR + 2 * (userSP - 3) / 512] * 512 + (userSP - 3) % 512];
returnAddress = [PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512;

// Check if the current user is root
if ([SYSTEM_STATUS_TABLE + 1] != 1) then
    // If not, return -1
    [returnAddress] = -1;
else
    alias i R4;
    i = 0;
    // Search for the username in the user table
    while (i < MAX_USER_NUM) do
        if ([USER_TABLE + i * 2 + 0] == username) then 
            break;
        endif;
        i = i + 1;
    endwhile;
    // If username not found, return -1
    if (i == MAX_USER_NUM) then
        [returnAddress] = -1;
    else
        alias encryptedPassword R5;
        encryptedPassword = password;
        // Encrypt the password
        encrypt encryptedPassword;
        // Check if the encrypted password matches the stored password
        if (encryptedPassword != [USER_TABLE + i * 2 + 1]) then 
            [returnAddress] = -1;
        else
            // Set the user ID and process state in the process table
            [PROCESS_TABLE + 32 + 3] = i; 
            [PROCESS_TABLE + 32 + 4] = CREATED; 

            [PROCESS_TABLE + 16 + 4] = WAIT_PROCESS;
            [PROCESS_TABLE + 16 + 5] = 2; 
            [SYSTEM_STATUS_TABLE + 0] = i;

            // Call the scheduler
            multipush(R0, R1, R2, R3, R4, R5);
            call SCHEDULER;
            multipop(R0, R1, R2, R3, R4, R5);

            // Return success
            [returnAddress] = 0;

        endif;
    endif;
endif;

// Restore the user stack pointer
SP = userSP;
// Reset the mode flag in the process table
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]) * 16 + 9] = 0;

// Return from the interrupt
ireturn;