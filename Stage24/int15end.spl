// Save the current stack pointer (SP) to the process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

// Set the stack pointer (SP) for the next process
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

// Set the status of the next process to 'Ready'
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 21;

// Check if the next process is not the idle process and not in 'Blocked' state
if ([SYSTEM_STATUS_TABLE + 1] != 1 && [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3] != 1) then
    // Restore the stack pointer (SP) of the next process
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
    // Set the status of the next process to 'Running'
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    // Return from interrupt
    ireturn;
else
    // Load inode table from disk to memory
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = 59;
    R4 = 3;
    call DEVICE_MANAGER;

    // Load user table from disk to memory
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = 60;
    R4 = 4;
    call DEVICE_MANAGER;

    // Load root file from disk to memory
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = 62;
    R4 = 5;
    call DEVICE_MANAGER;

    // Load disk free list from disk to memory
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = 61;
    R4 = 2;
    call DEVICE_MANAGER;
    
    // Halt the system
    halt;
endif;