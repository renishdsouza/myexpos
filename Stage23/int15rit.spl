
// Alias for user stack pointer
alias user_sp R1;
user_sp = SP;

// Alias for process ID
alias pid R2;
pid = [SYSTEM_STATUS_TABLE + 1];

// Alias for user ID
alias user_id R3;
user_id = [SYSTEM_STATUS_TABLE];

// Set process state to TERMINATED
[PROCESS_TABLE + 16*pid + 9] = 21;

// Set stack pointer to user stack
SP = [PROCESS_TABLE + 16*pid + 11]*512 - 1;

// Check if the process is not the INIT process
if(pid != 1 || user_id != 1) then
    // Invalidate the page table entry
    [[PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512] = -1;
    // Reset process state
    [PROCESS_TABLE + 16*pid + 9] = 0;
    // Restore stack pointer
    SP = user_sp;
    // Return from interrupt
    ireturn;
endif;

// Store Inode table and user table
multipush(R1, R2, R3);
R1 = 1;
R2 = pid;
R3 = 59;
R4 = 3; 
call DEVICE_MANAGER;
multipop(R1, R2, R3);

multipush(R1, R2, R3);
R1 = 1;
R2 = pid;
R3 = 60; 
R4 = 4; 
call DEVICE_MANAGER;
multipop(R1, R2, R3);

// Store root file
multipush(R1, R2, R3);
R1 = 1;
R2 = pid;
R3 = 62;
R4 = 5; 
call DEVICE_MANAGER;
multipop(R1, R2, R3);

// Store disk free list
multipush(R1, R2, R3);
R1 = 1;
R2 = pid;
R3 = 61;
R4 = 2;
call DEVICE_MANAGER;
multipop(R1, R2, R3);

// Halt the system
halt;