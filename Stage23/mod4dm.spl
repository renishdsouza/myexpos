// Module 4 - Device manager - Terminal and Disk
alias functionNum R1;
alias currentPID R2;

// Disk Store
if(functionNum == 1) then
    alias pageNumber R3;
    alias blockNumber R4;
    multipush(R1, R2, R3, R4);
    
    // Set function number for disk store
    R1 = 3;
    R2 = R2;
    call MOD_0;
    multipop(R1, R2, R3, R4);
    
    // Update disk status table
    [DISK_STATUS_TABLE + 1] = 1;
    [DISK_STATUS_TABLE + 2] = pageNumber;
    [DISK_STATUS_TABLE + 3] = blockNumber;
    
    // Store page to disk
    store(pageNumber, blockNumber);
    
    // Set process state to WAIT_DISK
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    call MOD_5;
    return;
endif;

// Disk load
if(functionNum == 2) then
    alias pageNumber R3;
    alias blockNumber R4;
    multipush(R1, R2, R3, R4);
    
    // Set function number for disk load
    R1 = 3;
    R2 = R2;
    call MOD_0;
    multipop(R1, R2, R3, R4);
    
    // Update disk status table
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = pageNumber;
    [DISK_STATUS_TABLE + 3] = blockNumber;
    
    // Load page from disk
    load(pageNumber, blockNumber);
    
    // Set process state to WAIT_DISK
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    call MOD_5;
    return;
endif;

// Terminal Write
if(functionNum == 3) then
    alias word R3;
    multipush(R1, R2, R3);
    
    // Set function number for terminal write
    functionNum = 8;
    currentPID = currentPID;
    call MOD_0;
    multipop(R1, R2, R3);
    
    // Print word to terminal
    print word;
    multipush(R1, R2, R3);
    
    // Set function number for terminal write completion
    functionNum = 9;
    currentPID = currentPID;
    call MOD_0;
    multipop(R1, R2, R3);
    return;
endif;

// Terminal Read 
if(functionNum == 4) then
    alias word R3;
    multipush(R1, R2, R3);
    
    // Set function number for terminal read
    functionNum = 8;
    currentPID = currentPID;
    call MOD_0;
    multipop(R1, R2, R3);
    
    // Read from terminal
    read;
    
    // Set process state to WAIT_TERMINAL
    [PROCESS_TABLE + 16*currentPID + 4] = WAIT_TERMINAL;
    multipush(R1, R2, R3);
    call MOD_5;
    multipop(R1, R2, R3);
    
    // Calculate physical address and store read word
    alias phyAddr R4;
    phyAddr = [PAGE_TABLE_BASE + currentPID*20 + 2*word/512]*512 + word%512;
    [phyAddr] = [PROCESS_TABLE + 16*currentPID + 8];
    return;
endif;
