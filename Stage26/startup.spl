// module 7

// Load initial values into registers
loadi(54, 67);
loadi(55, 68);

// Set idle process values
loadi(69, 11);
loadi(70, 12);

// Set stack pointer
SP = 82 * 512;

// Call boot module
call BOOT_MODULE;

// Set page table base register and page table length register
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

// Initialize page table entries for Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// Initialize page table entries for Heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

// Initialize page table entries for Code
[PTBR + 8] = 69;
[PTBR + 9] = "0100";
[PTBR + 10] = 70;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// Initialize page table entries for Stack
[PTBR + 16] = 81;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

// Copy the first instruction of the code segment to the stack segment
[81 * 512] = [69 * 512 + 1];

// Initialize process table entries
[PROCESS_TABLE + 1] = 0; // Process ID
[PROCESS_TABLE + 4] = RUNNING; // Process state
[PROCESS_TABLE + 11] = 82; // Stack page number
[PROCESS_TABLE + 13] = 8 * 512; // Stack pointer
[PROCESS_TABLE + 12] = 0; // Program counter
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE; // Page table base
[PROCESS_TABLE + 15] = 10; // Page table length

// Initialize system status table
[SYSTEM_STATUS_TABLE + 1] = 0; // System status

// Set stack pointer for the process
SP = 8 * 512;

// Return from interrupt
ireturn;