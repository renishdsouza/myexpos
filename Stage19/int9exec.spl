// Save the current stack pointer (SP) in the process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

// Alias for user stack pointer
alias userSP R0;
userSP = SP;

// Set the new stack pointer for the system process
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

// Set the process state to 9 (indicating execution)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

// Aliases for registers
alias physicalPageNumber R1;
alias offset R2;
alias physicalAddress R3;
alias page_table R5;

// Calculate the base address of the page table for the current process
page_table = PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1];

// Calculate the physical address of the user stack pointer
physicalPageNumber = [page_table + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
physicalAddress = physicalPageNumber * 512 + offset;

// Alias for the file name
alias fileName R6;
fileName = [physicalAddress];

// Aliases for inode entry and flag
alias inodeEntry R7;
alias flag R8;

// Initialize inode entry and flag
inodeEntry = 0;
flag = 0;

// Loop through the inode table to find the executable file
while (inodeEntry < MAX_FILE_NUM) do
    if (fileName == [INODE_TABLE + inodeEntry * 16 + 1]) then
        if ([INODE_TABLE + inodeEntry * 16] == EXEC) then
            flag = 1;
            break;
        endif;
    endif;
    inodeEntry = inodeEntry + 1;
endwhile;

// If the executable file is not found, handle the error
if (flag == 0) then
    physicalPageNumber = [page_table + 2 * ((userSP - 1) / 512)];
    offset = (userSP - 1) % 512;
    [physicalPageNumber * 512 + offset] = -1;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    SP = userSP;
    ireturn;
endif;

// Save the current state of registers
multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);

// Set up parameters for the MOD_1 module and call it
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;

// Restore the state of registers
multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

// Alias for user area page number
alias userAreaPageNumber R9;
userAreaPageNumber = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];

// Update the memory free list
[MEMORY_FREE_LIST + userAreaPageNumber] = [MEMORY_FREE_LIST + userAreaPageNumber] + 1;

// Decrement the system status table counter
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

// Set the stack pointer to the user area page number
SP = userAreaPageNumber * 512;

// Update the process table to indicate the process is running
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = inodeEntry;

// Allocating pages for the process
// Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// Save the current state of registers
multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// Heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

// Stack
R1 = 1;
call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

R1 = 1;
call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";

// Restore the state of registers
multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// Code
alias numBlocks R10;
alias i R11;
alias currentPID R12;
currentPID = [SYSTEM_STATUS_TABLE + 1];

// Calculate the number of blocks for the code
numBlocks = (([INODE_TABLE + 16 * inodeEntry + 2] - 1) / 512) + 1;

// Initialize Disk Map table
i = 2;
while (i < 10) do
    if (i == 2 || i == 3) then // Heap
        [DISK_MAP_TABLE + currentPID * 10 + i] = -1;
    else
    if (i == 9 || i == 9) then // Stack
        [DISK_MAP_TABLE + currentPID * 10 + i] = -1;
    else
    if (i - 4 < numBlocks) then // Code
        [DISK_MAP_TABLE + currentPID * 10 + i] = [INODE_TABLE + inodeEntry * 16 + 8 + (i - 4)];
    else
        [DISK_MAP_TABLE + currentPID * 10 + i] = -1;
    endif;
    endif;
    endif;
    i = i + 1;
endwhile;

// Save the current state of registers
multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// Set up parameters for the MOD_2 module and call it
R1 = 5;
R2 = [INODE_TABLE + inodeEntry * 16 + 8];
call MOD_2;
[PTBR + 8] = R0;
[PTBR + 9] = "0100";

// Initialize PTBR entries
i = 1;
while (i < 4) do
    [PTBR + 8 + 2 * i] = -1;
    [PTBR + 9 + 2 * i] = "0000";
    i = i + 1;
endwhile;

// Restore the state of registers
multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// Initialize per-process resource table
i = 1;
while (i < 9) do
    [([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] + 1) * 512 - 2 * i] = -1;
    i = i + 1;
endwhile;

// Copy the first byte of the code page to the stack page
[[PTBR + 16] * 512] = [[PTBR + 8] * 512 + 1];

// Set the stack pointer to the top of the stack
SP = 8 * 512;

// Reset the process state to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

// Return from the interrupt
ireturn;